<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">toja.io</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://toja.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://toja.io" />
<updated>2015-03-17T14:44:36-03:00</updated>
<id>http://toja.io/</id>
<author>
  <name>Osvaldo Toja</name>
  <uri>http://toja.io/</uri>
  <email>osvaldo.toja@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Creating Native Packages the Lazy Way]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/creating-native-packages-the-lazy-way/" />
  <id>http://toja.io/creating-native-packages-the-lazy-way</id>
  <published>2015-03-17T12:01:06-03:00</published>
  <updated>2015-03-17T12:01:06-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;the-chain&quot;&gt;the chain&lt;/h1&gt;

&lt;p&gt;Using native packages provides many benefits. However, building native packages is not a simple task. Tools like &lt;code&gt;fpm&lt;/code&gt; help getting the job done but still creating the package is only one link on the whole chain. &lt;/p&gt;

&lt;p&gt;The chain starts on the code repositories, where the files to be deployed are stored. For source code files, subversion and git repositories are common choices. Artifactory servers are used by java projects. The first step would be to able to grab the code from any of thouse sources.&lt;/p&gt;

&lt;p&gt;To create the packages some data is needed. Metadata like the plattform supported by the files, the version number. Data like the directory where the files will be installed. Actions which might be required to be executed upon installation or removal of the package.&lt;/p&gt;

&lt;p&gt;The family of the server will define whether a deb or an rpm file will be created. Both formats should be supported since are the most used and it would not be weird to have only one to migrate to the other one at some point in time.&lt;/p&gt;

&lt;p&gt;The final step would be to make available the new package to the servers. Package repositories are used for that purpose. So the package will need to be published. Repositories used to be stored on web server’s directories but these days services like Amazon’s S3 are used as well.&lt;/p&gt;

&lt;h1 id=&quot;the-tool&quot;&gt;the tool&lt;/h1&gt;

&lt;p&gt;How can we orchestrate the package creation chain? A tool for achieving such goal is described below. It is built on ansible, using fpm as the motor engine, aptly as the publishing media and jenkins for running the show. &lt;/p&gt;

&lt;p&gt;Main features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple. Configuration is done via yaml files.&lt;/li&gt;
  &lt;li&gt;modular. New inputs or outputs can be added writing ansible playbooks.&lt;/li&gt;
  &lt;li&gt;scalable. Can be used for large number of components.&lt;/li&gt;
  &lt;li&gt;convention over configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the objectives for this project was not to require any technical knowledge of native package creation in order to use it. All the data required to create the package is stored in one place: the variables files. When a new package is required, just add a new file to the variables directory and it will be ready to be built. If a git repository is used for this project, a PR would be all it needs for a developer to get his code ready for installation using native packages.&lt;/p&gt;

&lt;p&gt;The arquitecture is based on the Unix philosophy. Small parts combined to provide the final result. Each step is responsable for one thing only. The input plugins will retrieve the files and place them under a predefined directory. The package’s data is defined on variables stored in yaml files. The &lt;code&gt;fpm&lt;/code&gt; command is executed with the proper set of variables to create the native package. Once the package was created, the output plugin will publish it to a package repository.&lt;/p&gt;

&lt;p&gt;Simplicity does comes at a cost. Use of convention over configuration is mandatory for some of the features of this tool, the use of common variables for instance.&lt;/p&gt;

&lt;h1 id=&quot;data&quot;&gt;data&lt;/h1&gt;

&lt;p&gt;Data is stored in ansible variable files. Packages can be grouped to avoid repeating data. For instance, a web site might have different components: modules, themes (i’m thinking drupal), each one a different package yet all sharing the same document root. A common file can be created for storing such data while keeping info about the components on their specific file. A variable file named &lt;code&gt;all&lt;/code&gt; will contain data available to all projects. &lt;/p&gt;

&lt;p&gt;Data can be stored in a hierarchy format composed by three levels where the more granular override the general ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;global&lt;/li&gt;
  &lt;li&gt;common&lt;/li&gt;
  &lt;li&gt;component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also data specific for the plugins, which be stored on files &lt;code&gt;input-*&lt;/code&gt; and &lt;code&gt;output-*&lt;/code&gt; where the plugin name will be part of the filename (e.g. &lt;code&gt;input-git&lt;/code&gt; for the git input plugin).&lt;/p&gt;

&lt;h2 id=&quot;global&quot;&gt;global&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;global&lt;/code&gt; level consists of only one file: &lt;code&gt;group_vars/all&lt;/code&gt;. This file stores variables shared by all components.&lt;/p&gt;

&lt;p&gt;Examples.&lt;/p&gt;

&lt;p&gt;Package metadata can be stored on this file. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# package metadata&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_vendor&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ACME&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_license&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Apache Licence&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_maintainer&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;release-team@acme.com&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Default values for the build process like the directory where the input plugins will store the files for the build process process them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# fpm temp dir&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_tmp_dir&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/var/tmp/fpm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mantainer scripts can be added to the package just by droping the scripts in a predefined folder. Same works for config files like service scripts.
The location of the folder where this files are to be found can be defined at a global level. It is also a good design choice to provide default options or whether to use or not the funcionalities provided by the tool.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# roles/packaging/tasks/pkg-scripts.yml&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;init_scripts_rootdir&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/home/local/git/pkg-scripts/&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_scripts_setup&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_script_opts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;--template-scripts&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_script_files_opt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preinst&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--before-install&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;postinst&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--after-install&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prerm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--before-remove&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;postrm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;--after-remove&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;fpm_pkg_opts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# roles/packaging/tasks/pkg-conffiles.yml&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_conffiles_setup&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_conffiles_etcdir&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/etc&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;fpm_scripts_opts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any value found on this file will be ovewritten if declared on any of the following levels.&lt;/p&gt;

&lt;h2 id=&quot;common&quot;&gt;common&lt;/h2&gt;

&lt;p&gt;If a project is splited on several packages, chances are they will share some variables, like the document root for web based projects. To avoid repeating data, a file can be created which will be automatically be imported during the build phase. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rpm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;base_prefix&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/home/httpd/www.acme.com&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--rpm-user&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;httpd&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--deb-group&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;httpd&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;deb&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;base_prefix&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/var/www/www.acme.com&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--deb-user&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;www-data&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--deb-group&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;www-data&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The common level is composed by files named &lt;code&gt;common-&#39;component-name&#39;&lt;/code&gt;. The filename for the common variables is created by parsing the component string: “common-&lt;first word=&quot;&quot; of=&quot;&quot; the=&quot;&quot; component=&quot;&quot; up=&quot;&quot; to=&quot;&quot; dash=&quot;&quot; sign=&quot;&quot;&gt;&quot;. So a component named &lt;code&gt;web-frontend&lt;/code&gt; will automatically import the &lt;code&gt;common-web&lt;/code&gt; file.&lt;/first&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# extracts the component name up to the first dash&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;get common component filename&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;set_fact&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;common_component=&amp;quot;{{ component | regex_replace(&amp;#39;(.*?)\-.*$&amp;#39;, &amp;#39;\\1&amp;#39;) }}&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;#&amp;quot; include common if it exists, just continue if not&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include component common vars file&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include_vars&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group_vars/common-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;common_component&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ignore_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The common file is not mandatory, execution will continue normally if the file is not found.&lt;/p&gt;

&lt;h2 id=&quot;component&quot;&gt;component&lt;/h2&gt;

&lt;p&gt;The variables declared at this level will override any previously declared variable. Because of the way ansible works, there is no merge for variables, it just use the new one. The files at component level will be named after the project’s name and stored in the &lt;code&gt;group_vars&lt;/code&gt; directory. For a project named web-frontend, the file &lt;code&gt;group_vars/web-frontend&lt;/code&gt; will automatically be imported. The execution of the tool will fail if this file is not found.&lt;/p&gt;

&lt;p&gt;The component variable file is mandatory, execution will be interrupted if the file is not found.&lt;/p&gt;

&lt;h1 id=&quot;input&quot;&gt;input&lt;/h1&gt;

&lt;p&gt;The input plugins do only one job. To retrieve the files and put them on a folder in the server. Plugins are ansible tasks files available in the &lt;code&gt;packaging&lt;/code&gt; role. Each plugin will have the logic for retrieving the files where the development team left them.&lt;/p&gt;

&lt;p&gt;The plugin to be used is declared via the &lt;code&gt;component_input&lt;/code&gt; variable, usually on the common file: &lt;/p&gt;

&lt;p&gt;group_vars/common-web&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;component_input: main_jfrog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By convention, input variable files will be named: &lt;code&gt;input-&#39;component_input&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include component input vars file&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include_vars&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group_vars/input-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_input&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;component_input is defined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although the project can use the same technologies, like artifactory servers or git repositories, different teams might use different servers, which means different access urls, credentials.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;component_input&lt;/code&gt; variable will point to an input file where such data is stored. All git related input files will do share one variable in common: &lt;code&gt;input_type: artifact&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# group_vars/web-frontend&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;component_input&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;github&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# group_vars/web-translations&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;component_input&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;gitlab&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# group_vars/web-daemon&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;component_input&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;main_jfrog&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# group_vars/input-github&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git@github.com:acme&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# group_vars/input-gitlab&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git@git.acme.com.ar:acme&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#group_vars/input-main_jfrog&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;jfrog_admin_user&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;jfrog_admin_password&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secret&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;jfrog_url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jfrog.acme.com.ar/artifactory/simple&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;artifact&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The input variable files will contain specific access data for that component. But all the component stored in a git repository will have the following line: &lt;code&gt;input_type: git&lt;/code&gt;. This variable defines the task file to be used on the ansible role &lt;code&gt;packaging&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;roles/packaging/tasks/main.yml&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git.yml&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_type == &amp;#39;git&amp;#39;&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;artifact.yml&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;input_type == &amp;#39;artifact&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this setup, both components: web-frontend and web-translations will download code using the &lt;code&gt;git.yml&lt;/code&gt; task file using the corresponding access credentials. &lt;/p&gt;

&lt;p&gt;At the end of this step, the code will reside in a directory, by default: &lt;code&gt;/var/tmp/&#39;component-name&#39;/src&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;build&quot;&gt;build&lt;/h1&gt;

&lt;p&gt;Once the files had been retrieved and placed in the directory, the time has come for the &lt;code&gt;fpm&lt;/code&gt; command to be executed. Mantainer scripts and rcconf files are added if required.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg-scripts.yml&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_scripts_setup&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg-conffiles.yml&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg_conffiles_setup&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The actual execution of the &lt;code&gt;fpm&lt;/code&gt; command was moved to the next step to handle the creation and publishing of the package in the same task file.&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;output&lt;/h1&gt;

&lt;p&gt;The output plugin to be used is selected via a similar procedure to the one used by the input plugins.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# output&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include component input vars file&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include_vars&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;group_vars/output-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_output&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;component_output is defined&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ignore_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are way too many variables to take into consideration when creating native packages. Just using ansible to ease the handling of variables passed as command line options to the &lt;code&gt;fpm&lt;/code&gt; would had worth the effort.&lt;/p&gt;

&lt;p&gt;Here we create the native package, grab the name (parsing fpm’s output) and notify the availability via a hipchat channel.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;deb -  creating package with fpm&lt;/span&gt; 
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;fpm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-t&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;deb&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg_input_type&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_package_name_prefix&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_package_name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--version&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--iteration&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--architecture&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_arch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--maintainer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg_maintainer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--description&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_description&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--url&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_uri&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--vendor&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg_vendor&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--license&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg_license&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg.deb.user&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg.deb.group&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fpm_scripts_opts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-C&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;chdir={{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pkg_tmp_dir&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}/{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;out&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;deb -  get package name&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;set_fact&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkgfile={{ out.stdout_lines[0] | regex_replace(&amp;#39;.*path=&amp;gt;&amp;quot;(.*\.deb).*$&amp;#39;, &amp;#39;\\1&amp;#39;) }}&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;var=pkgfile&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;hipchat_v2&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;msg=&amp;quot;new package created {{ pkgfile }}&amp;quot; color=&amp;quot;{{ pkg_hipchat_color }}&amp;quot; room=&amp;quot;{{ pkg_hipchat_room }}&amp;quot; token=&amp;quot;{{ pkg_hipchat_token }}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Debian repositories only make available the latest version of a package. This is a problem for development environments when a rollback to a previous version is always an option. &lt;a href=&quot;http://www.aptly.info/&quot;&gt;Aptly&lt;/a&gt; is a tool for managing Debian repositories.&lt;/p&gt;

&lt;p&gt;Aptly works in two steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;first the package is added to the aptly internal repository&lt;/li&gt;
  &lt;li&gt;then the package is published on a Debian repository (local or on S3).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this setup, the code’s branch is used to decide on which internal aptly repo the package will be added. A package can be published to one or more debian repositories.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# main apt repository (aptly)&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;deb -  adding package to repository&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;aptly repo add {{ item.repo }} {{ pkg_tmp_dir }}/{{ component }}/{{ pkgfile }}&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;component_package_publish.branch.{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yaml_branch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}.aptly&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;main_apt&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_publish_target&amp;quot;&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;deb -  update repository&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;aptly&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item.distribution&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item.endpoint&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;component_package_publish.branch.{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yaml_branch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}.aptly&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;main_apt&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;component_publish_target&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;ansible&quot;&gt;ansible&lt;/h1&gt;

&lt;p&gt;Ansible is responsable for orquestrating the creation of the package. Providing the variables, executing the &lt;code&gt;fpm&lt;/code&gt; command with the right options and publishing the package to the debian repository.&lt;/p&gt;

&lt;p&gt;Execution is done via the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;ansible-playbook -i inventory main.yml -e &amp;quot;component=web-modules version=1.0.2 branch=master sha=646a561&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── group_vars&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   ├── all&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   ├── backend-daemon&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   ├── common-web&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   ├── languages&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   ├── web-modules&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   └── web-themes&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── inventory&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── main.yml&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;└── roles&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;└── packaging&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── defaults&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;│   └── main.yml&lt;/span&gt;
        &lt;span class=&quot;l-Scalar-Plain&quot;&gt;└── tasks&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── artifact.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── deb.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── git.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── main.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── pkg-conffiles.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;├── pkg-scripts.yml&lt;/span&gt;
            &lt;span class=&quot;l-Scalar-Plain&quot;&gt;└── svn.yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/creating-native-packages-the-lazy-way/&quot;&gt;Creating Native Packages the Lazy Way&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on March 17, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[About Native Packages]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/about-native-packages/" />
  <id>http://toja.io/about-native-packages</id>
  <published>2015-03-17T11:50:04-03:00</published>
  <updated>2015-03-17T11:50:04-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;code&quot;&gt;Code&lt;/h1&gt;

&lt;p&gt;It all started with a developer writing the code. Once it’s finished, how can we use that code? Code runs on servers, so what we do with code? Deploy it on servers!  But it’s not that simple: lots of code runs on servers. &lt;/p&gt;

&lt;h1 id=&quot;servers&quot;&gt;Servers&lt;/h1&gt;

&lt;p&gt;Let’s talk a bit about servers. Servers are like apartment buildings, not houses. If you and your neighbor, you both live in houses with three or more floors, each house could have its own elevator. But if you live in a apartment building, chances are you and your neighbor, both share the same and one elevator. The point is, there are facilities on buildings which are shared by all of the residents.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;it can also be said: servers are like cattle, not pets. but that wasn’t the topic at hand ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Same way, in servers, where lots of process live, there are facilities which were created in order to ease the operations of the server and the services running on top of it. Logs for example. Instead of having to write the code which will handle the creation, rotation, maintenace, etc of log files, there is a facility provided by the server OS providing that service. The code use that facility when it needs to log anything, a system call is all it takes. The OS will take care of the rest (syslog on unix systems, event viewer on windows).&lt;/p&gt;

&lt;p&gt;A similar solution was created in order to deploy code on servers but more on that in a moment.&lt;/p&gt;

&lt;h1 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h1&gt;

&lt;p&gt;We were talking about getting the code into servers. So, how we deploy the code on the servers? &lt;/p&gt;

&lt;p&gt;In the beginings:  tgz files (a winzip unix equivalent).  The code was packed on a zipped file, copied to the server, unpacked and if required, moved to the proper directory. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those zipped files ready for deployments are also known as artifacts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple process for installing the artifacts but not without problems: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dependencies &lt;/li&gt;
  &lt;li&gt;tracking &lt;/li&gt;
  &lt;li&gt;auditing &lt;/li&gt;
  &lt;li&gt;versioning &lt;/li&gt;
  &lt;li&gt;upgrade &lt;/li&gt;
  &lt;li&gt;rollback &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if a component depends on another one? You can’t define that in zip files.
How to keep record of installation of new packages? Writing custom scripts, yeap, been there, avoid that.
How to know if the files on the directories were locally modified after deployment? Unpacking the original file in another directory and run a comparisson.
How to handle upgrades? What if the new version deprecated a file? You will need to delete it (which is not that hard, but remember to do it, it is).
What if something went wrong and you need to rollback? Download the previous version file, unpack, restore it. Not that bad but time consuming it is (did i mentioned it was a rollback?)&lt;/p&gt;

&lt;p&gt;If you’re using artifacts, you might had faced this kind of problems. If you’re using git based deployments you might not had had most of those issues, but then, you might have a different set of problems like deploying the code to fresh servers (when the .git folder containing commit history is heavier than the actual code size, and it will take longer as the repo grows). Although that’s not the main issue with git based deployments, what if the code needs to be placed. Or  on  different directories in the filesystem, for each directory on the same root dir. Not good.&lt;/p&gt;

&lt;h1 id=&quot;native-packages&quot;&gt;Native packages&lt;/h1&gt;

&lt;p&gt;Lucky us working with linux, since 1998 a (by then small) company came up with a solution, a &lt;a href=&quot;http://magazine.redhat.com/2007/02/08/the-story-of-rpm/&quot;&gt;tool&lt;/a&gt; for solving all of those problems, The tool was called rpm and the company name was Red Hat (rpm stands for RedHat Package Manager).&lt;/p&gt;

&lt;p&gt;Files were packed in one rpm file and installed using the (surprise) the &lt;code&gt;rpm&lt;/code&gt; command. An rpm package contains no only the files to be deployed but also provides metadata about the package and even the chance to execute commands during the installation (or removal) process.&lt;/p&gt;

&lt;p&gt;This is not a Red Hat exclusive, Debian created its own package manager: &lt;code&gt;apt-get&lt;/code&gt; command for &lt;code&gt;.deb&lt;/code&gt; files. Microsoft users will be familiar with &lt;code&gt;.msi&lt;/code&gt; files and so on. All of this files are called native packages because they are created fo an specific plattform.  You will be stopped if you try to install a 32bit package on a 64bit plattform. Packages are created not only for an specific OS but most of the time, can only be installed on specific versions of the OS. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OS in the context refers to OS family, like Debian and Ubuntu or Red Hat and CentOS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Benefits of native packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dependencies &lt;/li&gt;
  &lt;li&gt;Tracking &lt;/li&gt;
  &lt;li&gt;auditing &lt;/li&gt;
  &lt;li&gt;versioning &lt;/li&gt;
  &lt;li&gt;upgrade &lt;/li&gt;
  &lt;li&gt;rollback &lt;/li&gt;
  &lt;li&gt;Conf files (init scripts, logrotate conf, …) &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Scripts ([[pre&lt;/td&gt;
          &lt;td&gt;post]&lt;/td&gt;
          &lt;td&gt;[inst&lt;/td&gt;
          &lt;td&gt;rem]] (create log dirs, app dirs, users)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;command line tools &lt;/li&gt;
  &lt;li&gt;repositories &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those issues we had with zipped files, are now benefits. You can declare dependencies between packages on the file’s metadata. The command will enforce (and automatically resolve) those dependencies. The tools (whether &lt;code&gt;rpm&lt;/code&gt; or &lt;code&gt;apt-get&lt;/code&gt;) keep a log of actions (using the shared facility) so events can be tracked, all done by the system with no scripting from our side. The tools allow us to check available or installed versions. Upgrade can be done by running a single command, to the latest or to an specific version. Rolling back is as simple as declaring a previous version when installing a package.&lt;/p&gt;

&lt;p&gt;Besides, native packages can be instructed to executed certain actions, like creating or removing a user, a folder, or managing services. This actions will be declared for each of the following four states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;before the installation&lt;/li&gt;
  &lt;li&gt;after the installation&lt;/li&gt;
  &lt;li&gt;before the removal&lt;/li&gt;
  &lt;li&gt;after the removal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Native packages provide special handling for configuration files, those which usually reside on the &lt;code&gt;/etc&lt;/code&gt; directory (like init scripts).
But there’s more. You can’t install the same file from two packages (try one zip file’s content not to overwrite another’s one). Want to know which package certain file came from? no problem. Some examples are presented below (debian/ubuntu):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;How to check metadata &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; a package:
&lt;span class=&quot;c&quot;&gt;# apt-cache info &amp;lt;package-name&amp;gt;&lt;/span&gt;
How to install a package:
&lt;span class=&quot;c&quot;&gt;# apt-get install &amp;lt;package-name&amp;gt; &lt;/span&gt;
How to find a package: 
&lt;span class=&quot;c&quot;&gt;# apt-cache search &amp;lt;pkg-name&amp;gt; &lt;/span&gt;
Which files were installed by a package 
&lt;span class=&quot;c&quot;&gt;# dpkg -L &amp;lt;package-name&amp;gt;&lt;/span&gt;
Wich package installed that file? 
&lt;span class=&quot;c&quot;&gt;# dpkg -S &amp;lt;fullpathfilename&amp;gt;&lt;/span&gt;
Which versions are available &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; a package
&lt;span class=&quot;c&quot;&gt;# apt-cache madison &amp;lt;package-name&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;native-package-creation&quot;&gt;Native package creation&lt;/h1&gt;

&lt;p&gt;So, packages are a good fit for deploying code into servers. How can we create packages? &lt;/p&gt;

&lt;p&gt;It’s complicated, but … meet &lt;a href=&quot;https://github.com/jordansissel/fpm&quot;&gt;fpm&lt;/a&gt; (a ruby gem). It helps you build packages quickly and easily (no kidding on this one!). &lt;/p&gt;

&lt;p&gt;Installing the tools is already simple, being a ruby gem is just a matter of executing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;gem install fpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Building a package will only require declaring a source and an output like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;fpm -s &amp;lt;&lt;span class=&quot;nb&quot;&gt;source type&lt;/span&gt;&amp;gt; -t &amp;lt;target &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;list of sources&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;“Source type” is what your package is coming from; a directory (dir), a rubygem (gem), an rpm (rpm), a python package (python), a php pear module (pear), etc.&lt;/li&gt;
  &lt;li&gt;“Target type” is what your output package form should be. Most common are “rpm” and “deb” but others exist (solaris, etc)&lt;/li&gt;
  &lt;li&gt;list of sources will depend on the source type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;naming-schema&quot;&gt;Naming Schema&lt;/h1&gt;

&lt;p&gt;It helps a lot to use a naming schema when creating native packages. Any schema wil work as long as it’s carefully thought of and enforce from the begining.&lt;/p&gt;

&lt;p&gt;One proposal can be the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&amp;lt;company-name&amp;gt;-&amp;lt;component-name&amp;gt;-&amp;lt;semver&amp;gt;-&amp;lt;branch&amp;gt;-&amp;lt;sha&amp;gt;-&amp;lt;serial&amp;gt;_&amp;lt;arch&amp;gt;.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;company name. It’s easy just to type &lt;code&gt;dpkg -l &#39;company-name&#39;-*&lt;/code&gt; in order to check custom installed packages. It helps with the scripting.&lt;/li&gt;
  &lt;li&gt;component name. Just the name of the package.&lt;/li&gt;
  &lt;li&gt;semver. Semantic versioning, more on this in a bit.&lt;/li&gt;
  &lt;li&gt;branch. Chances are you’re using some sort of code versioning tool. It helps enforcing deployment policies. Supose you deploy code from master branch in staging and production environments and from dev branch in testing. This will help avoid installing packages in the wrong environment.&lt;/li&gt;
  &lt;li&gt;sha. If using git, this is the commit id.&lt;/li&gt;
  &lt;li&gt;serial. It allows the creation of more than one package with the same code (branch and sha). When using jenkins to build packages, can be the &lt;code&gt;BUILD_NUMBER&lt;/code&gt; allowing easy access to the build which created that package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two words of advice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://semver.org/&quot;&gt;Semver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Convention over configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semver works not only for proper package versioning but for helping enforce dependencies later on.&lt;/p&gt;

&lt;p&gt;It is almost certain that deployment scripts will parse package names at some point, enforce convention over configuration in order to avoid having to patch those scripts everytime a developer arrives with an odly named package. It will make you waste time but also important, will make him wait longer while we search for a ‘workaround’ instead of using the benefits of the already existing insfrastructure.&lt;/p&gt;

&lt;p&gt;Last but not least. If the lenght of the package name cause any concerns, keep in mind it’s not supposed to be handled by humans,  but by automation tools. Readability works so we’re still good.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;A tool was created to deal with the above scenario. A collection of yam files where you define variables and get a native package in return. Ansible is used as the glue, fpm for package creation and aptly for publishing the packages. 
For input a plugable architecture allows for defining several sources, same for the output.&lt;/p&gt;

&lt;p&gt;Technologies such as docker, will complement this approach. What if you don’t need an rpm package for deploying code on a docker container? No problem, you had already a system in place capable of pulling the source from every component you have. That’s half the battle already won. Adding a layer to store the code in a container and publish it would only be as hard as adding an ansible playbook.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/about-native-packages/&quot;&gt;About Native Packages&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on March 17, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Organizing Group Vars Files in Ansible]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/using-host-and-group-vars-files-in-ansible/" />
  <id>http://toja.io/using-host-and-group-vars-files-in-ansible</id>
  <published>2014-09-14T22:51:11-03:00</published>
  <updated>2014-09-14T22:51:11-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;from &lt;a href=&quot;http://docs.ansible.com/intro_inventory.html#splitting-out-host-and-group-specific-data&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to the storing variables directly in the INI file, host and group variables can be stored in individual files relative to the inventory file.&lt;/p&gt;

&lt;h2 id=&quot;directory-layout&quot;&gt;directory layout&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;production/
├── group_vars
│   └── server.yml
└── inventory
staging/
├── group_vars
│   └── server
└── inventory
group-vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;playbook&quot;&gt;playbook&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# group-vars.yml
- hosts: all
  user: osvaldo
  sudo: no
  gather_facts: False

  tasks:
     - debug: msg=&quot;reading from &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;files-in-production-directory&quot;&gt;files in production directory&lt;/h2&gt;

&lt;p&gt;inventory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# production/inventory
[server]
localhost   ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vars&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# production/group_vars/server.yml
env_name: production
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;files-in-staging-directory&quot;&gt;files in staging directory&lt;/h2&gt;

&lt;p&gt;inventory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# staging/inventory
[server]
localhost   ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vars&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# staging/group_vars/server
env_name: staging
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;executing-the-playbook&quot;&gt;executing the playbook&lt;/h2&gt;

&lt;p&gt;using data from staging directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ ansible-playbook -i staging group-vars.yml

PLAY [all] ********************************************************************

TASK: [debug msg=&quot;reading from &quot;] *********************************
ok: [localhost] =&amp;gt; {
    &quot;msg&quot;: &quot;reading from staging&quot;
}

PLAY RECAP ********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;using data from production directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ ansible-playbook -i production group-vars.yml

PLAY [all] ********************************************************************

TASK: [debug msg=&quot;reading from &quot;] *********************************
ok: [localhost] =&amp;gt; {
    &quot;msg&quot;: &quot;reading from production&quot;
}

PLAY RECAP ********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Interesting fact: &lt;code&gt;ansible-playbook&lt;/code&gt; when provided a directory as the inventory, will search by default a file named inventory so no need to specify &lt;code&gt;-i production/inventory&lt;/code&gt;, only &lt;code&gt;-i production&lt;/code&gt; will work just fine.&lt;/p&gt;
&lt;/blockquote&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/using-host-and-group-vars-files-in-ansible/&quot;&gt;Organizing Group Vars Files in Ansible&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on September 14, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Install Ansible in CentOS 5.3]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/install-ansible-in-centos-5-3/" />
  <id>http://toja.io/install-ansible-in-centos-5-3</id>
  <published>2014-09-14T22:50:52-03:00</published>
  <updated>2014-09-14T22:50:52-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;install-ansible-in-centos-5-3&lt;/p&gt;

&lt;p&gt;30 Jan 14 @ 14:48&lt;/p&gt;

&lt;p&gt;Using ansible in CentOS 5.3 can be done via a handful of simple steps.&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;First we install python modules. Ansible is available via package managers but not for CentOS 5.3 so a git based installation will be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/home/rls/bin/python/bin/pip install paramiko PyYAML jinja2 httplib2
cd ~/bin
git clone git://github.com/ansible/ansible.git
sed -i &#39;1 s/python$/python2.7/&#39; ansible/bin/ansible*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After cloning the repository, the binary scripts are modified in order to use our custom python 2.7 installation.&lt;/p&gt;

&lt;h4 id=&quot;test-installation&quot;&gt;Test installation&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;source bin/ansible/hacking/env-setup
echo &quot;127.0.0.1 ansible_python_interpreter=/home/rls/bin/python/bin/python2.7  ansible_connection=local&quot; &amp;gt; ~/ansible_hosts
export ANSIBLE_HOSTS=~/ansible_hosts
ansible -i ~/ansible_hosts all -m ping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;expected output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;
[osvaldo@srv2 ~]$ ansible -i ~/ansible_hosts all -m ping  -o
127.0.0.1 | success &amp;gt;&amp;gt; {&quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;}

[osvaldo@srv2 ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;post-installation-steps&quot;&gt;Post installation steps&lt;/h4&gt;

&lt;p&gt;Add to &lt;code&gt;~/.bash_profile&lt;/code&gt; the following line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;source bin/ansible/hacking/env-setup
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/install-ansible-in-centos-5-3/&quot;&gt;Install Ansible in CentOS 5.3&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on September 14, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/hello-world/" />
  <id>http://toja.io/hello-world</id>
  <published>2014-08-08T16:39:55-03:00</published>
  <updated>2014-08-08T16:39:55-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;h2 id=&quot;sample-heading&quot;&gt;Sample Heading&lt;/h2&gt;

&lt;h3 id=&quot;sample-heading-2&quot;&gt;Sample Heading 2&lt;/h3&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/hello-world/&quot;&gt;Hello World&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on August 08, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to Get Last Commit Hash in Git]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/how-to-get-last-commit-hash-in-git/" />
  <id>http://toja.io/how-to-get-last-commit-hash-in-git</id>
  <published>2014-03-12T21:15:58-03:00</published>
  <updated>2014-03-12T21:15:58-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;The bash way&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ git log -n1 | grep commit | awk &#39;{print $2}&#39;
fc77768a4f7c460be765012c9a04e9645e4520d2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The git way&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# short - using h
$ git log --pretty=format:&#39;%h&#39; -n 1
fc77768
# long - using H
$ git log --pretty=format:&#39;%H&#39; -n 1
fc77768a4f7c460be765012c9a04e9645e4520d2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify the number of digits of the hash using &lt;code&gt;--abbrev=n&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ git show --pretty=%h --abbrev=18
fc77768a4f7c460be7
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/how-to-get-last-commit-hash-in-git/&quot;&gt;How to Get Last Commit Hash in Git&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on March 12, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Parsing in Coffescript]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/parsing-in-coffescript/" />
  <id>http://toja.io/parsing-in-coffescript</id>
  <published>2014-02-26T15:35:04-03:00</published>
  <updated>2014-02-26T15:35:04-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Parsing with regex is simple in coffescript. Just use the same syntax as &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot;&gt;Javascript&lt;/a&gt; as shown below.&lt;/p&gt;

&lt;p&gt;More info &lt;a href=&quot;http://coffeescriptcookbook.com/chapters/regular_expressions/heregexes&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;tl;dr&lt;/p&gt;

&lt;p&gt;for your copy/paste please, just type the following on a &lt;code&gt;coffee&amp;lt;/console&amp;gt;.&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;string=&quot;wp-theme-acme-2.1.33.zip&quot;
pattern = /^([a-z\-]*)-([\d\.]*).zip/
string.match(pattern)
[component,version] = string.match(pattern)[1...3]
component
version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;coffee&amp;gt; string=&quot;wp-theme-acme-2.1.33.zip&quot;
&#39;wp-theme-acme-2.1.33.zip&#39;
coffee&amp;gt; pattern = /^([a-z\-]*)-([\d\.]*).zip/
/^([a-z\-]*)-([\d\.]*).zip/
coffee&amp;gt; string.match(pattern)
[ &#39;wp-theme-acme-2.1.33.zip&#39;,
  &#39;wp-theme-acme&#39;,
  &#39;2.1.33&#39;,
  index: 0,
  input: &#39;wp-theme-acme-2.1.33.zip&#39; ]
coffee&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can store the parsed results directly into variables using something like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[component,version] = string.match(pattern)[1...3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;coffee&amp;gt; [component,version] = string.match(pattern)[1...3]
[ &#39;wp-theme-acme&#39;, &#39;2.1.33&#39; ]
coffee&amp;gt; component
&#39;wp-theme-acme&#39;
coffee&amp;gt; version
&#39;2.1.33&#39;
coffee&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/parsing-in-coffescript/&quot;&gt;Parsing in Coffescript&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on February 26, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Http Requests in Coffeescript]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/http-request-in-coffeescript/" />
  <id>http://toja.io/http-request-in-coffeescript</id>
  <published>2014-02-26T15:11:01-03:00</published>
  <updated>2014-02-26T15:11:01-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Coffescript is quite easy.&lt;/p&gt;

&lt;p&gt;The following code shows how to perform an http get request. The script will obtain the string value if exists, and will show an error if the http return code indicates the value doesn’t exist.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http_get.coffee &lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffescript&quot;&gt;http = require &#39;http&#39;

component=&#39;frontend&#39;
url=&quot;http://dev.acme.com/api/conf/key/&quot;+component+&quot;/DEFAULT_DEPLOY_ENV&quot;
console.log url
req = http.get url, (res) -&amp;gt;
  status = res.statusCode
  value = if status == 200 then 1 else 0
  if status == 200
    # ...
    console.log &quot;yey!&quot;
    res.on &#39;data&#39;, (chunk) -&amp;gt;
      console.log(&#39;body: &#39; + chunk)
  else
    # ...
    console.log &quot;i&#39;m not worthy&quot;

req.on &#39;error&#39;, -&amp;gt;
  msg = &quot;not available&quot;
  console.log msg
console.log &quot;done!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;osvaldo@laptop:~/ $ coffee http_get.coffee
http://dev.acme.com/api/conf/key/frontend/someenv
done!
i&#39;m not worthy
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;osvaldo@laptop:~/ $ coffee http_get.coffee
http://dev.acme.com/api/conf/key/frontend/prod
done!
yey!
body: prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus note check how the &lt;code&gt;console.log &quot;done!&quot;&lt;/code&gt; is executed before displaying the output from the request. That’s because of the asynchronous nature from the callback function  handling the request.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/http-request-in-coffeescript/&quot;&gt;Http Requests in Coffeescript&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on February 26, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Using Logstash for Artifactory Notifications]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/using-logstash-for-artifactory-notifications/" />
  <id>http://toja.io/using-logstash-for-artifactory-notifications</id>
  <published>2014-02-16T16:44:58-03:00</published>
  <updated>2014-02-16T16:44:58-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;One of the limitations for the opensource version of &lt;a href=&quot;http://www.jfrog.com/home/v_artifactory_opensource_overview&quot;&gt;Artifactory’s jfrog&lt;/a&gt; is notifications for newly added artifacts. We will provide a workaround to that issue.&lt;/p&gt;

&lt;p&gt;Being an app running inside a tomcat container, a  quick inspection on the log file revealed new artifacts creation was being logged in. Below it’s an example taken from the log file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;2014-02-06 14:13:47,259 [art-exec-3091] [INFO ] (o.a.s.a.ArchiveIndexer:102) - The content of the archive: &#39;acme-alfa-3.4.5.zip&#39; was indexed successfully.
2014-02-06 14:19:45,870 [art-exec-3094] [INFO ] (o.a.s.a.ArchiveIndexer:102) - The content of the archive: &#39;acme-beta-3.4.1.zip&#39; was indexed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple solution would had been using a &lt;code&gt;tail -f .. | some_parsing_script.sh&lt;/code&gt;. But that would had implied taking care of the persistance of the script (screen is not &lt;em&gt;that&lt;/em&gt; good). So the search for a generic solution begins.&lt;/p&gt;

&lt;p&gt;Being familiar with logstash it was just a matter of taking a quick look at the documentation and writing down a simple configuration file.&lt;/p&gt;

&lt;p&gt;The configuration files contains three sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input. where you declare the source of the logs. here we’re using a file, the path for the log file and a plus advantage is the support for log files created by commonly used services like tomcat.&lt;/li&gt;
  &lt;li&gt;filter. where we declare the parsing logic, for now, just standard regex parse.&lt;/li&gt;
  &lt;li&gt;output. whenever the filter matches the declared string on this section, an execution will occured. here we send a notification to IRC (via hubot) and execute an ansible playbook on a remote server via ssh.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-conf&quot;&gt;input {
  file {
    type =&amp;gt; &quot;tomcat&quot;
    path =&amp;gt; &quot;/var/log/artifactory/catalina/catalina.out&quot;

  }


}
filter {
   grok {
     match =&amp;gt; [ &quot;message&quot;, &quot;^%{TIMESTAMP_ISO8601:date},%{NUMBER:number}%{GREEDYDATA:data1}The content of the archive: &#39;%{DATA:artifact}&#39;%{GREEDYDATA:data}&quot; ]
   }
}

output {
  if [data] =~ &quot;successfully.$&quot; {
    exec {
      command =&amp;gt; &quot;curl -s -H &#39;Host: hubot.acme.com&#39; &#39;http://10.1.0.10/message/create?room=%23hubot&amp;amp;text=new%20artifact:%20&#39;%{artifact}&quot;
    }
    exec {
      command =&amp;gt; &quot;ssh srv9 /home/bofh/ansible/deploy-pkg.sh %{artifact} prod&quot;
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/using-logstash-for-artifactory-notifications/&quot;&gt;Using Logstash for Artifactory Notifications&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on February 16, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA['Staying Alive' by Ghost]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/staying-alive-by-ghost/" />
  <id>http://toja.io/staying-alive-by-ghost</id>
  <published>2014-02-06T14:15:55-03:00</published>
  <updated>2014-02-06T14:15:55-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This site was meant to be an static site (generated, of course). However, I found some issues with the generated site (links pointing to folder/index.html instead of just folder/) so the decision to run it behind an nginx server was made.&lt;/p&gt;

&lt;p&gt;Today ghost crashed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/var/www/ghost/toja.io/node_modules/express-hbs/node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js:444
    throw new Exception(&quot;You must pass a string or Handlebars AST to Handlebar&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luckily there’re a couple of options: supervisord, init scripts and forever. Being this a temporary setup (the static site version is the ultimate goal remember?) the third option was choosen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nodejitsu/forever&quot;&gt;forever&lt;/a&gt;  can be used to run Ghost as a background task. forever will restart the node process if it crashes.&lt;/p&gt;

&lt;p&gt;Installation is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo npm -g install forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Being temporary doesn’t means it should run without leaving any track. Forever allows you to use a log file. Since the daemon will be running under a non-root account a directory was created, owned by the same user the script will be executed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo mkdir /var/www/ghost/logs/
sudo chown osvaldo:osvaldo /var/www/ghost/logs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, forever will start ghots in development mode. To start Ghost in production mode type &lt;code&gt;NODE_ENV=production forever start index.js&lt;/code&gt;
The command should be run from the ghost installation directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /var/www/ghost/toja.io/
forever -l /var/www/ghost/logs/toja-io.log start index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if Ghost is currently running type &lt;code&gt;forever list&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;osvaldo@li68-220:~$ forever list
info:    Forever processes running
data:        uid  command             script   forever pid   logfile                         uptime
data:    [0] mnz9 /usr/local/bin/node index.js 20031   20033 /var/www/ghost/logs/toja-io.log 0:0:1:26.478
osvaldo@li68-220:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop Ghost type &lt;code&gt;forever stop index.js&lt;/code&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/staying-alive-by-ghost/&quot;&gt;&#39;Staying Alive&#39; by Ghost&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on February 06, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Installing Pip]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/installing-pip/" />
  <id>http://toja.io/installing-pip</id>
  <published>2014-01-30T14:19:49-03:00</published>
  <updated>2014-01-30T14:19:49-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Installation of pip will be done via &lt;code&gt;easy_install&lt;/code&gt;, a command provided by the setuptools package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /var/tmp
wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg --no-check-certificate
sh setuptools-0.6c11-py2.7.egg --prefix=/home/osvaldo/bin/python
/home/osvaldo/bin/python/bin/easy_install-2.7 pip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;requires previous &lt;a href=&quot;/installing-python-2-7-in-centos-5-3/&quot;&gt;python 2.7 installation&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/installing-pip/&quot;&gt;Installing Pip&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 30, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Installing Git in Centos 5.3]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/installing-git-in-centos-5-3/" />
  <id>http://toja.io/installing-git-in-centos-5-3</id>
  <published>2014-01-30T12:04:46-03:00</published>
  <updated>2014-01-30T12:04:46-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
sudo yum install git-core
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/installing-git-in-centos-5-3/&quot;&gt;Installing Git in Centos 5.3&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 30, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Installing Python 2.7 in CentOS 5.3]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/installing-python-2-7-in-centos-5-3/" />
  <id>http://toja.io/installing-python-2-7-in-centos-5-3</id>
  <published>2014-01-29T10:37:43-03:00</published>
  <updated>2014-01-29T10:37:43-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Ansible requires python 2.6 or newer.
CentOS 5.3 comes with python 2.4, a version which is used by system tools like yum.
In order to run ansible on older CentOS version, an alternative installation is provided below.
The following commands will install Python 2.7 (check section for requirements below) in the user’s directory. No root access is required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;USER=osvaldo
VERSION=2.7.5
mkdir ~/src
cd ~/src
wget http://python.org/ftp/python/$VERSION/Python-$VERSION.tar.bz2
tar xjf Python-$VERSION.tar.bz2
rm Python-$VERSION.tar.bz2
cd Python-$VERSION
INSTALL_DIR=/home/$USER/bin/python27
mkdir -p $INSTALL_DIR
./configure --prefix=$INSTALL_DIR
make
make install
ln -s $INSTALL_DIR/bin/python27 /home/${USER}/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;requirements&quot;&gt;Requirements&lt;/h4&gt;

&lt;p&gt;If after the &lt;code&gt;make&lt;/code&gt; step the following error appears&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[osvaldo@srv2 Python-2.7.5]$ make
running build
running build_ext
INFO: Can&#39;t locate Tcl/Tk libs and/or headers

Python build finished, but the necessary bits to build these modules were not found:
_bsddb             _curses            _curses_panel
_sqlite3           _tkinter           bsddb185
bz2                dbm                gdbm
sunaudiodev
To find the necessary bits, look in setup.py in detect_modules() for the module&#39;s name.

running build_scripts
[osvaldo@srv2 Python-2.7.5]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following packages should be installed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;post-installation&quot;&gt;Post installation&lt;/h4&gt;

&lt;p&gt;The new binaries should be added to the bin path. This can be done by modifying the &lt;code&gt;~/.bash_profile&lt;/code&gt; to look like the following. Remember to start a new session for the change to apply.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;PATH=$PATH:$HOME/bin:$HOME/bin/python/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example. The following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[osvaldo@srv2 tmp]$ sh setuptools-0.6c11-py2.7.egg --prefix=/home/osvaldo/bin/python
setuptools-0.6c11-py2.7.egg: line 3: exec: python2.7: not found
[osvaldo@srv2 tmp]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can be fixed after adding the python 2.7 binary scripts to the bin path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;[osvaldo@srv2 tmp]$ sh setuptools-0.6c11-py2.7.egg --prefix=/home/osvaldo/bin/python
Processing setuptools-0.6c11-py2.7.egg
Copying setuptools-0.6c11-py2.7.egg to /home/osvaldo/bin/python27/lib/python2.7/site-packages
Adding setuptools 0.6c11 to easy-install.pth file
Installing easy_install script to /home/osvaldo/bin/python/bin
Installing easy_install-2.7 script to /home/osvaldo/bin/python/bin
Installed /home/osvaldo/bin/python27/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg
Processing dependencies for setuptools==0.6c11
Finished processing dependencies for setuptools==0.6c11
[osvaldo@srv2 tmp]$
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;http://toja.io/installing-python-2-7-in-centos-5-3/&quot;&gt;Installing Python 2.7 in CentOS 5.3&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 29, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Previewing Ghost 0.4]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/previewing-ghost-0-4/" />
  <id>http://toja.io/previewing-ghost-0-4</id>
  <published>2014-01-11T16:56:40-03:00</published>
  <updated>2014-01-11T16:56:40-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;
https://ghost.org/download/

git clone git@github.com:TryGhost/Ghost.git
cd Ghost
git submodule update --init
bundle install
sudo npm install -g grunt-cli
npm install
grunt init
npm start

# Front-end will be accesible at http://localhost:2368, Admin is at http://localhost:2368/ghost/.


# buster

pip install buster
buster --version
buster setup

buster generate --domain=http://127.0.0.1:2368
buster preview
buster deploy

# nice! .... (no hice el setup)
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/previewing-ghost-0-4/&quot;&gt;Previewing Ghost 0.4&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 11, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Code Snippets]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/code-snippets/" />
  <id>http://toja.io/code-snippets</id>
  <published>2014-01-01T21:45:37-03:00</published>
  <updated>2014-01-01T21:45:37-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;no matter how pretty ghost might be, proper display of code snippets is a must.&lt;/p&gt;

&lt;p&gt;shell script&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#!/bin/bash
hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$msg=&quot;hola&quot;;
phpinfo();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hum… no coloring syntax. we’ll came back to that later on.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/code-snippets/&quot;&gt;Code Snippets&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 01, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Oh My Ghost]]></title>
  <link rel="alternate" type="text/html" href="http://toja.io/oh-my-ghost/" />
  <id>http://toja.io/oh-my-ghost</id>
  <published>2014-01-01T21:42:57-03:00</published>
  <updated>2014-01-01T21:42:57-03:00</updated>
  <author>
    <name>Osvaldo Toja</name>
    <uri>http://toja.io</uri>
    <email>osvaldo.toja@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;the long title for this post is: “Searching for a blogging tool that’s fun to use, easy, nice looking and a couple more of things”&lt;/p&gt;

&lt;p&gt;fun to use because boring stuff is … well, not fun to use. life’s too short so what’s the point in doing something you’re just not motivated to do in first place.
easy because i’m lazy, you got me.
nice looking because let’s face it dudes, pretty matters, good things don’t have to be ugly, that’s just a bad excuse for not taking care of (good) design.&lt;/p&gt;

&lt;p&gt;will ghost fit the bill? let’s find out …&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://toja.io/oh-my-ghost/&quot;&gt;Oh My Ghost&lt;/a&gt; was originally published by Osvaldo Toja at &lt;a href=&quot;http://toja.io&quot;&gt;toja.io&lt;/a&gt; on January 01, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>